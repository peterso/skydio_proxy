"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import skydio.lcmtypes.eigen_lcm._Quaterniond

import skydio.lcmtypes.eigen_lcm._Vector3d

import skydio.lcmtypes.eigen_lcm._Vector3d

import skydio.lcmtypes.eigen_lcm._Vector3d

class pose_state_t(object):
    __slots__ = ["utime", "orientation", "position", "angular_velocity_global", "velocity_global"]

    def __init__(self,
                 utime=0,
                 orientation=None,
                 position=None,
                 angular_velocity_global=None,
                 velocity_global=None,
                 _skip_initialize=False):
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize: return
        self.utime = utime
        self.orientation = skydio.lcmtypes.eigen_lcm.Quaterniond._default() if orientation is None else orientation
        self.position = skydio.lcmtypes.eigen_lcm.Vector3d._default() if position is None else position
        self.angular_velocity_global = skydio.lcmtypes.eigen_lcm.Vector3d._default() if angular_velocity_global is None else angular_velocity_global
        self.velocity_global = skydio.lcmtypes.eigen_lcm.Vector3d._default() if velocity_global is None else velocity_global

    @staticmethod
    def _skytype_meta():
        return dict(
            type='struct',
            package='body',
            name='pose_state_t',
        )

    @classmethod
    def _default(cls):
        return cls()

    def __repr__(self):
        return 'lcmtypes.body.pose_state_t({})'.format(
            ', '.join('{}={}'.format(name, repr(getattr(self, name))) for name in self.__slots__))

    def encode(self):
        buf = BytesIO()
        buf.write(pose_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        assert self.orientation._get_packed_fingerprint() == skydio.lcmtypes.eigen_lcm.Quaterniond._get_packed_fingerprint()
        self.orientation._encode_one(buf)
        assert self.position._get_packed_fingerprint() == skydio.lcmtypes.eigen_lcm.Vector3d._get_packed_fingerprint()
        self.position._encode_one(buf)
        assert self.angular_velocity_global._get_packed_fingerprint() == skydio.lcmtypes.eigen_lcm.Vector3d._get_packed_fingerprint()
        self.angular_velocity_global._encode_one(buf)
        assert self.velocity_global._get_packed_fingerprint() == skydio.lcmtypes.eigen_lcm.Vector3d._get_packed_fingerprint()
        self.velocity_global._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pose_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pose_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pose_state_t(_skip_initialize=True)
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.orientation = skydio.lcmtypes.eigen_lcm.Quaterniond._decode_one(buf)
        self.position = skydio.lcmtypes.eigen_lcm.Vector3d._decode_one(buf)
        self.angular_velocity_global = skydio.lcmtypes.eigen_lcm.Vector3d._decode_one(buf)
        self.velocity_global = skydio.lcmtypes.eigen_lcm.Vector3d._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pose_state_t in parents: return 0
        newparents = parents + [pose_state_t]
        tmphash = (0x7214b9ce4186ae11+ skydio.lcmtypes.eigen_lcm.Quaterniond._get_hash_recursive(newparents)+ skydio.lcmtypes.eigen_lcm.Vector3d._get_hash_recursive(newparents)+ skydio.lcmtypes.eigen_lcm.Vector3d._get_hash_recursive(newparents)+ skydio.lcmtypes.eigen_lcm.Vector3d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pose_state_t._packed_fingerprint is None:
            pose_state_t._packed_fingerprint = struct.pack(">Q", pose_state_t._get_hash_recursive([]))
        return pose_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)
