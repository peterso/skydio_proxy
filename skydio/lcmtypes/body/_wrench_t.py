"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import skydio.lcmtypes.eigen_lcm._Vector3f

import skydio.lcmtypes.eigen_lcm._Vector3f

class wrench_t(object):
    __slots__ = ["force", "torque"]

    def __init__(self,
                 force=None,
                 torque=None,
                 _skip_initialize=False):
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize: return
        self.force = skydio.lcmtypes.eigen_lcm.Vector3f._default() if force is None else force
        self.torque = skydio.lcmtypes.eigen_lcm.Vector3f._default() if torque is None else torque

    @staticmethod
    def _skytype_meta():
        return dict(
            type='struct',
            package='body',
            name='wrench_t',
        )

    @classmethod
    def _default(cls):
        return cls()

    def __repr__(self):
        return 'lcmtypes.body.wrench_t({})'.format(
            ', '.join('{}={}'.format(name, repr(getattr(self, name))) for name in self.__slots__))

    def encode(self):
        buf = BytesIO()
        buf.write(wrench_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.force._get_packed_fingerprint() == skydio.lcmtypes.eigen_lcm.Vector3f._get_packed_fingerprint()
        self.force._encode_one(buf)
        assert self.torque._get_packed_fingerprint() == skydio.lcmtypes.eigen_lcm.Vector3f._get_packed_fingerprint()
        self.torque._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != wrench_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return wrench_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = wrench_t(_skip_initialize=True)
        self.force = skydio.lcmtypes.eigen_lcm.Vector3f._decode_one(buf)
        self.torque = skydio.lcmtypes.eigen_lcm.Vector3f._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if wrench_t in parents: return 0
        newparents = parents + [wrench_t]
        tmphash = (0x980c3aea984c9a6+ skydio.lcmtypes.eigen_lcm.Vector3f._get_hash_recursive(newparents)+ skydio.lcmtypes.eigen_lcm.Vector3f._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if wrench_t._packed_fingerprint is None:
            wrench_t._packed_fingerprint = struct.pack(">Q", wrench_t._get_hash_recursive([]))
        return wrench_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)
