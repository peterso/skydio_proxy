"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import skydio.lcmtypes.voxels._voxel_header_t

class voxel_occupancy_run_length_encoded_t(object):
    __slots__ = ["utime", "header", "runs"]

    def __init__(self,
                 utime=0,
                 header=None,
                 runs=None,
                 _skip_initialize=False):
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize: return
        self.utime = utime
        self.header = skydio.lcmtypes.voxels.voxel_header_t._default() if header is None else header
        self.runs = [] if runs is None else runs

    @staticmethod
    def _skytype_meta():
        return dict(
            type='struct',
            package='voxels',
            name='voxel_occupancy_run_length_encoded_t',
        )

    @classmethod
    def _default(cls):
        return cls()

    def __repr__(self):
        return 'skydio.lcmtypes.voxels.voxel_occupancy_run_length_encoded_t({})'.format(
            ', '.join('{}={}'.format(name, repr(getattr(self, name))) for name in self.__slots__))

    def encode(self):
        buf = BytesIO()
        buf.write(voxel_occupancy_run_length_encoded_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        assert self.header._get_packed_fingerprint() == skydio.lcmtypes.voxels.voxel_header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        v_num_runs = len(self.runs)
        buf.write(struct.pack('>i', v_num_runs))
        buf.write(struct.pack('>%di' % v_num_runs, *self.runs[:v_num_runs]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != voxel_occupancy_run_length_encoded_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return voxel_occupancy_run_length_encoded_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = voxel_occupancy_run_length_encoded_t(_skip_initialize=True)
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.header = skydio.lcmtypes.voxels.voxel_header_t._decode_one(buf)
        v_num_runs = struct.unpack('>i', buf.read(4))[0]
        self.runs = struct.unpack('>%di' % v_num_runs, buf.read(v_num_runs * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if voxel_occupancy_run_length_encoded_t in parents: return 0
        newparents = parents + [voxel_occupancy_run_length_encoded_t]
        tmphash = (0x6ed46c830136aea1+ skydio.lcmtypes.voxels.voxel_header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if voxel_occupancy_run_length_encoded_t._packed_fingerprint is None:
            voxel_occupancy_run_length_encoded_t._packed_fingerprint = struct.pack(">Q", voxel_occupancy_run_length_encoded_t._get_hash_recursive([]))
        return voxel_occupancy_run_length_encoded_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)
