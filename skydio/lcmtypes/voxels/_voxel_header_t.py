"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import skydio.lcmtypes.eigen_lcm._Vector3i

import skydio.lcmtypes.eigen_lcm._Vector3i

class voxel_header_t(object):
    __slots__ = ["dims", "scale", "origin"]

    def __init__(self,
                 dims=None,
                 scale=0.0,
                 origin=None,
                 _skip_initialize=False):
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize: return
        # x,y,z dimensions in cell counts
        self.dims = skydio.lcmtypes.eigen_lcm.Vector3i._default() if dims is None else dims
        # how big is each cell in the world
        self.scale = scale
        # offset of origin (min point) within the grid
        self.origin = skydio.lcmtypes.eigen_lcm.Vector3i._default() if origin is None else origin

    @staticmethod
    def _skytype_meta():
        return dict(
            type='struct',
            package='voxels',
            name='voxel_header_t',
        )

    @classmethod
    def _default(cls):
        return cls()

    def __repr__(self):
        return 'skydio.lcmtypes.voxels.voxel_header_t({})'.format(
            ', '.join('{}={}'.format(name, repr(getattr(self, name))) for name in self.__slots__))

    def encode(self):
        buf = BytesIO()
        buf.write(voxel_header_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.dims._get_packed_fingerprint() == skydio.lcmtypes.eigen_lcm.Vector3i._get_packed_fingerprint()
        self.dims._encode_one(buf)
        buf.write(struct.pack(">f", self.scale))
        assert self.origin._get_packed_fingerprint() == skydio.lcmtypes.eigen_lcm.Vector3i._get_packed_fingerprint()
        self.origin._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != voxel_header_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return voxel_header_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = voxel_header_t(_skip_initialize=True)
        self.dims = skydio.lcmtypes.eigen_lcm.Vector3i._decode_one(buf)
        self.scale = struct.unpack(">f", buf.read(4))[0]
        self.origin = skydio.lcmtypes.eigen_lcm.Vector3i._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if voxel_header_t in parents: return 0
        newparents = parents + [voxel_header_t]
        tmphash = (0x86f6b70946f50102+ skydio.lcmtypes.eigen_lcm.Vector3i._get_hash_recursive(newparents)+ skydio.lcmtypes.eigen_lcm.Vector3i._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if voxel_header_t._packed_fingerprint is None:
            voxel_header_t._packed_fingerprint = struct.pack(">Q", voxel_header_t._get_hash_recursive([]))
        return voxel_header_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)
