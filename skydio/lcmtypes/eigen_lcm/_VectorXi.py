"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class VectorXi(object):
    __slots__ = ["rows", "data"]

    def __init__(self,
                 rows=0,
                 data=None,
                 _skip_initialize=False):
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize: return
        self.rows = rows
        self.data = [] if data is None else data

    @staticmethod
    def _skytype_meta():
        return dict(
            type='struct',
            package='eigen_lcm',
            name='VectorXi',
        )

    @classmethod
    def _default(cls):
        return cls()

    def __repr__(self):
        return 'lcmtypes.eigen_lcm.VectorXi({})'.format(
            ', '.join('{}={}'.format(name, repr(getattr(self, name))) for name in self.__slots__))

    def encode(self):
        buf = BytesIO()
        buf.write(VectorXi._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.rows))
        buf.write(struct.pack('>%di' % self.rows, *self.data[:self.rows]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != VectorXi._get_packed_fingerprint():
            raise ValueError("Decode error")
        return VectorXi._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = VectorXi(_skip_initialize=True)
        self.rows = struct.unpack(">i", buf.read(4))[0]
        self.data = struct.unpack('>%di' % self.rows, buf.read(self.rows * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if VectorXi in parents: return 0
        tmphash = (0x9347b9a23a82b6c5) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if VectorXi._packed_fingerprint is None:
            VectorXi._packed_fingerprint = struct.pack(">Q", VectorXi._get_hash_recursive([]))
        return VectorXi._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)
